// SPDX-License-Identifier: MIT
pragma solidity 0.8.26;

contract MyContract {
    address public owner;
    uint256 public balance;

    constructor() {
        owner = msg.sender;
        balance = 0;
    }

    // Function to deposit ether into the contract
    function deposit() public payable {
        require(msg.value > 0, "Deposit amount must be greater than zero");
        balance += msg.value;
    }

    // Function to withdraw ether from the contract
    function withdraw(uint256 amount) public {
        require(msg.sender == owner, "Only the owner can withdraw");
        require(amount <= balance, "Insufficient balance");

        balance -= amount;
        payable(msg.sender).transfer(amount);

        // Assert statement to ensure balance is never negative
        assert(balance >= 0);
    }

    // Function to trigger a custom error and use revert()
    function triggerRevert() public pure {
        revert("This is a custom error message triggered by revert");
    }
}
